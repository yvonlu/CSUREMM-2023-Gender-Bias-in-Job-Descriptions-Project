import argparse
import numpy as np

def generate():
    parser = argparse.ArgumentParser()
    parser.add_argument('--embeddings_file', default='glove.6B.200d.txt', type=str)
    args = parser.parse_args()

    words = []
    vectors = []
    with open(args.embeddings_file, 'r', encoding='utf-8') as f:
        for line in f:
            values = line.rstrip().split(' ')
            word = values[0]
            vector = np.array([float(val) for val in values[1:]])
            words.append(word)
            vectors.append(vector)

    vocab_size = len(words)
    vocab = {w: idx for idx, w in enumerate(words)}
    ivocab = {idx: w for idx, w in enumerate(words)}

    W = np.array(vectors)

    # Normalize each word vector to unit variance
    W_norm = W / np.linalg.norm(W, axis=1, keepdims=True)

    return W_norm, vocab, ivocab


def distance(W, vocab, ivocab, input_term, bias_word_index):
    # Split input term into individual words
    input_words = input_term.split(' ')

    total_score = 0

    # Iterate through each word in the input text
    if isinstance(input_words, list):
        input_words = ' '.join(input_words)
    for word in input_words.split():
        if word in vocab:
            # print('Word: %s  Position in vocabulary: %i' % (word, vocab[word]))
            embedding = W[vocab[word], :]
            score = np.max([np.dot(embedding, W[vocab[word], :]) for word in bias_word_index if word in vocab])
            total_score += score
    
    normalized_score = total_score / len(input_words.split())
    print(normalized_score)


if __name__ == "__main__":
    N = 100  # number of closest words that will be shown
    W, vocab, ivocab = generate()
    bias_word_index = ["accurate",
    "accuracy",
    "accurately",
    "accuracies",
    "attentive",
    "caring",
    "committed",
    "creative",
    "dedicated",
    "diplomatically",
    "diplomatic",
    "diplomacy",
    "follow",
    "follower",
    "following",
    "friendly",
    "organized",
    "patient",
    "polite",
    "thoughtful",
    "welcome",
    "five days per week",
    "8.00 am to 6.00 pm",
    "bonus",
    "child",
    "childcare",
    "childcare vouchers",
    "commission",
    "package",
    "contracted (hours)",
    "family friendly",
    "family values",
    "flexibility",
    "flexible",
    "flexible benefits",
    "flexible schedule",
    "flexible hours",
    "guaranteed hours",
    "maternity (leave)",
    "Monday to Friday",
    "paternal (leave)",
    "permanent",
    "regular hours",
    "relocation package",
    "remote work",
    "scheme",
    "standard hours",
    "statutory sick pay",
    "work/life balance",
    "gal",
    "women",
    "woman",
    "lady",
    "her",
    "she",
    "affectionate",
    "cheerful",
    "childlike",
    "compassionate",
    "does not use harsh language",
    "eager to soothe hurt feelings",
    "feminine",
    "flatterable",
    "gentle",
    "gullible",
    "loves children",
    "loyal",
    "sensitive to the needs of others",
    "shy",
    "soft spoken",
    "sympathetic",
    "tender",
    "understanding",
    "warm",
    "yielding",
    "personable",
    "person-centered",
    "people-person"]  # Example bias word index

    while True:
        input_term = input("Enter an input text: ")
        if input_term == 'EXIT':
            break
        else:
            distance(W, vocab, ivocab, input_term, bias_word_index)
